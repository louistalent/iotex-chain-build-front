{"version":3,"sources":["reducer.tsx","useWallet.tsx","util.tsx","hooks/useWallet.tsx","components/Layout.tsx","Pages/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["locales","require","lang","window","localStorage","getItem","chainIds","Object","keys","networks","map","k","chainId","initial","walletModal","walletSelect","chainIdMatch","rpc","status","address","checking","balance","err","coins","coin","decimals","initialState","L","loading","inited","pending","txs","chain","targetChain","token","value","thccoins","BSC","process","IOTEX","REACT_APP_ADDRESS_IOTEX","ETH","createSlice","name","reducers","update","state","action","payload","undefined","Error","DISCONNECTED","CONNECTING","CONNECTED","ZERO","toEther","v","p","Number","BigInt","AppKey","request","url","params","a","fetch","method","headers","body","JSON","stringify","result","json","console","log","useWallet_","G","useSelector","dispatch","useDispatch","Slice","actions","connected","React","useEffect","getChainId","then","ethereum","on","accountChanged","chainChanged","getPending","buf","parse","check","network","results","net","web3","Web3","eth","getBlockNumber","height","limit","count","length","i","iEnd","push","jsonrpc","id","Accept","response","Array","isArray","blockNumber","_connect","accounts","replace","String","message","newChainId","changeNetwork","val","chainHexId","utils","toHex","res","code","error","connect","addNetwork","call","to","abi","args","contract","Contract","methods","send","isConnected","data","encodeABI","from","matches","match","err1","waitTransaction","txId","repeat","getTransactionReceipt","receipt","resolvedReceipt","Promise","resolve","setTimeout","getBalance","abiFlash","bridgebalance","bridge","approval","approve","deposit","abiBridge","setPending","key","tx","setItem","removePending","setTxs","tips","html","toast","position","autoClose","NETWORK_CHAIN_IDS","INFURA_ENDPOINT","walletconnect","WalletConnectConnector","infuraId","supportedChainIds","qrcode","pollingInterval","injected","InjectedConnector","walletlink","WalletLinkConnector","appName","handleError","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","toString","useWallet","useWeb3React","activate","connector","props","currentProvider","getAccounts","type","isMetaMask","location","href","walletConnectProvider","Layout","active","U","account","useState","isLoading","setIsLoadking","ChainCheck","handleConnect","WalletModal","className","onClick","style","justifyContent","fontSize","src","alt","width","fontWeight","color","marginTop","slice","children","target","Networks","Home","refAmount","useRef","THCPrice","countTHCPrice","setCountTHCPrice","query","submitLabel","setStatus","providerFee","protocalFee","slippage","fee","receiveValue","txDetail","setTxDetail","isPending","noTargetChain","setNotargetChain","tokenSelectModal","setTokenSelectModal","isActive","setIsActive","img","selectedTokenOnChain","setSelectedTokenOnChain","selectedTokenOnTargetChain","setSelectedTokenOnTargetChain","prices","gasPrices","maxGasLimit","base","setBase","updateStatus","timer","checkPending","clearTimeout","Date","time","setTime","getInfo","Math","round","onChangeValueOnChain","attrs","feeEther","THCprice","priceresult","InputChainInfo","info","fake_dis","setFake_dis","swapChains","params1","params2","confirmations","all","now","getTime","created","rows","onChangeValue","submit","targetToken","amount","decimal","rbalance","rbalance1","balance1","success","rApproval","current","focus","chainSelectActive","ChainActive","document","getElementById","classList","remove","add","CallTokenSelect","para","toLocaleLowerCase","TokenSelectNameImageUpdate","TokenSelect","margin","borderTop","background","padding","innerWidth","innerHeight","VirtualNetworks","e","onChangeNetwork","onChangeNetwork2","ref","borderRadius","toUpperCase","TokenList","index","pendingTxs","supported","sort","b","marginLeft","border","onChange","backgroundColor","toLowerCase","erc20","paddingTop","disabled","maxHeight","overflowY","marginRight","explorer","rel","title","textAlign","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","config","ReactDOM","render","StrictMode","getLibrary","provider","library","Web3Provider"],"mappings":"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","file":"static/js/main.7c1e8ba9.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport networks from \"./config/networks.json\";\r\n\r\nconst locales = {\r\n  \"en-US\": require(\"./locales/en-US.json\"),\r\n};\r\n\r\nconst lang = window.localStorage.getItem(\"lang\") || \"en-US\";\r\nconst DEFAULT_NET = \"BSC\";\r\n\r\nconst chainIds = {};\r\nObject.keys(networks).map((k) => (chainIds[networks[k].chainId] = k));\r\n\r\nconst initial: WalletTypes = {\r\n  walletModal: false,\r\n  walletSelect: \"\",\r\n  chainIds,\r\n  chainId: networks[DEFAULT_NET].chainId,\r\n  chainIdMatch: 56,\r\n  rpc: networks[DEFAULT_NET].rpc,\r\n  status: \"disconnected\",\r\n  address: \"\",\r\n  checking: false,\r\n  balance: \"\",\r\n  err: \"\",\r\n};\r\n\r\nconst coins: CoinTypes = {};\r\nfor (let k in networks) {\r\n  coins[networks[k].coin] = {\r\n    [k]: { address: \"-\", decimals: networks[k].decimals },\r\n  };\r\n}\r\n\r\nconst initialState: BridgeTypes = {\r\n  lang,\r\n  L: locales[lang],\r\n\r\n  coins,\r\n  loading: false,\r\n  inited: false,\r\n  pending: {},\r\n  txs: {},\r\n  ...initial,\r\n  chain: \"BSC\",\r\n  targetChain: \"IOTEX\",\r\n  token: \"THC\",\r\n  value: \"0001\",\r\n  thccoins: {\r\n    BSC: {\r\n      decimals: 18,\r\n      address: process.env.REACT_APP_ADDRESS_BSC,\r\n    },\r\n    IOTEX: {\r\n      decimals: 18,\r\n      address: process.env.REACT_APP_ADDRESS_IOTEX,\r\n    },\r\n    ETH: {\r\n      decimals: 18,\r\n      address: process.env.REACT_APP_ADDRESS_ETH,\r\n    },\r\n  },\r\n};\r\n//I should automatically create a flashcoins object.\r\n//Current flashcoins is created statically\r\n\r\nexport default createSlice({\r\n  name: \"bridge\",\r\n  initialState,\r\n  reducers: {\r\n    update: (state: any, action) => {\r\n      for (const k in action.payload) {\r\n        if (state[k] === undefined) new Error(\"  undefined account item\");\r\n        state[k] = action.payload[k];\r\n      }\r\n    },\r\n  },\r\n});\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport abiFlash from './config/abis/FlashToken.json';\r\nimport abiBridge from './config/abis/Bridge.json'\r\nimport networks from './config/networks.json'\r\nimport Slice from './reducer'\r\n/* import Web3 \t\t\t\t\t\tfrom 'web3' */\r\n\r\nexport const DISCONNECTED = 'disconnected';\r\nexport const CONNECTING = 'connecting';\r\nexport const CONNECTED = 'connected';\r\n/* export const getWeb3 = ()=>window.Web3; */\r\nexport const ZERO = \"0x0000000000000000000000000000000000000000\"\r\nexport const toHex = (val: string | number): string => new window.Web3().utils.toHex(val)\r\nexport const validAddress = (address: string): boolean => new window.Web3().isAddress(address)\r\nexport const fromEther = (v: number, p?: number) => '0x' + (BigInt(Math.round(v * 1e6)) * BigInt(10 ** ((p || 18) - 6))).toString(16)\r\nexport const toEther = (v: number | string, p?: number) => Number(BigInt(v) / BigInt(10 ** ((p || 18) - 6))) / 1e6\r\n\r\nconst AppKey = process.env.REACT_APP_GTAG || ''\r\nconst proxy = process.env.REACT_APP_ENDPOINT || ''\r\nconst ERR_INSTALL = '  You must install Metamask into your browser: https://metamask.io/download.html'\r\nconst ERR_DISCONNECTED = '  walllet disconnected'\r\nconst ERR_NOACCOUNTS = '  No selected address.'\r\nconst ERR_UNKNOWN = '  Unknown error'\r\nconst ERR_ASKCONNECT = '  Connect to Metamask using the button on the top right.'\r\nconst ERR_CANCELLED = '  You cancelled requested operation.'\r\nconst ERR_CHAINID = '  Invalid chain id #:chainId'\r\n\r\n\r\nexport const request = async (url: string, params?: any): Promise<ServerResponse | null> => {\r\n\ttry {\r\n\t\tconst result = await fetch(proxy + url,\r\n\t\t\t{\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: { 'content-type': 'application/json' },\r\n\t\t\t\tbody: params ? JSON.stringify(params) : null\r\n\t\t\t});\r\n\t\treturn await result.json();\r\n\t} catch (error) {\r\n\t\tconsole.log(error)\r\n\t}\r\n\treturn null\r\n}\r\n\r\nconst useWallet_ = (): UseWalletTypes => {\r\n\tconst G = useSelector((state: BridgeTypes) => state)\r\n\tconst L = G.L\r\n\tconst dispatch = useDispatch()\r\n\tconst update = (payload: { [key: string]: any }) => {\r\n\t\tdispatch(Slice.actions.update(payload))\r\n\t}\r\n\tconst connected = G.status === CONNECTED;\r\n\r\n\tReact.useEffect(() => {\r\n\t\tif (connected) {\r\n\t\t\tgetChainId().then(chainId => {\r\n\t\t\t\tif (chainId === networks[G.chain].chainId) {\r\n\t\t\t\t\tupdate({ status: CONNECTED })\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdate({ status: DISCONNECTED, err: ERR_DISCONNECTED })\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}, [G.chainId, connected])\r\n\r\n\tReact.useEffect(() => {\r\n\t\tconst { ethereum } = window\r\n\t\tif (ethereum && connected) {\r\n\t\t\tethereum.on('accountsChanged', accountChanged)\r\n\t\t\tethereum.on('chainChanged', chainChanged)\r\n\t\t}\r\n\t})\r\n\r\n\tconst getPending = (): { pending: PendingTypes, txs: TxTypes } => {\r\n\t\tlet pending: PendingTypes = {}\r\n\t\tlet txs: TxTypes = {}\r\n\t\ttry {\r\n\t\t\tlet buf = window.localStorage.getItem(AppKey)\r\n\t\t\tif (buf) pending = JSON.parse(buf)\r\n\t\t\tbuf = window.localStorage.getItem(AppKey + '-txs')\r\n\t\t\tif (buf) txs = JSON.parse(buf)\r\n\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\t\treturn { pending, txs }\r\n\t}\r\n\r\n\tconst setPending = (key: string, tx: PendingType) => {\r\n\t\tconst pending: PendingTypes = { ...G.pending, [key]: tx }\r\n\t\twindow.localStorage.setItem(AppKey, JSON.stringify(pending))\r\n\t\tupdate({ pending })\r\n\t}\r\n\tconst setTxs = (txs: TxTypes) => {\r\n\t\twindow.localStorage.setItem(AppKey + '-txs', JSON.stringify(txs))\r\n\t\tupdate({ txs })\r\n\t}\r\n\r\n\tconst check = async (network: string, txs: Array<string>): Promise<{ [txId: string]: number }> => {\r\n\t\tconst results: { [txId: string]: number } = {}\r\n\t\tconst net = networks[network]\r\n\t\tconst web3 = new window.Web3(net.rpc)\r\n\t\tconst height = await web3.eth.getBlockNumber()\r\n\t\tconst limit = 20\r\n\t\tconst count = txs.length\r\n\t\tfor (let i = 0; i < count; i += limit) {\r\n\t\t\tconst json: Array<{ jsonrpc: string, method: string, params: Array<string>, id: number }> = []\r\n\t\t\tlet iEnd = i + limit\r\n\t\t\tif (iEnd > count) iEnd = count\r\n\t\t\tfor (let k = i; k < iEnd; k++) {\r\n\t\t\t\tjson.push({ jsonrpc: '2.0', method: 'eth_getTransactionReceipt', params: [txs[k]], id: k++ })\r\n\t\t\t}\r\n\t\t\tconst response = await fetch(net.rpc, {\r\n\t\t\t\tbody: JSON.stringify(json),\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t\tmethod: \"POST\"\r\n\t\t\t})\r\n\t\t\tconst result = await response.json();\r\n\t\t\tif (result !== null && Array.isArray(result)) {\r\n\t\t\t\tfor (let v of result) {\r\n\t\t\t\t\tresults[txs[v.id]] = v.result && v.result.status === '0x1' ? height - Number(v.result.blockNumber) + 1 : -1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results\r\n\t}\r\n\tconst removePending = (txId: string) => {\r\n\t\ttry {\r\n\t\t\tlet pending = getPending()\r\n\t\t\tdelete pending[txId]\r\n\t\t\twindow.localStorage.setItem(AppKey, JSON.stringify(pending))\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\t}\r\n\r\n\tconst _connect = async (accounts?: Array<string>) => {\r\n\t\tlet err = '';\r\n\t\ttry {\r\n\t\t\tconst { ethereum } = window\r\n\t\t\tupdate({ status: CONNECTING, err: '' })\r\n\t\t\tif (ethereum) {\r\n\t\t\t\tif (accounts === undefined) accounts = await ethereum.request({ method: 'eth_requestAccounts' })\r\n\r\n\t\t\t\tif (accounts && accounts.length) {\r\n\t\t\t\t\tconst chainId = await getChainId();//wallet connected chainId\r\n\t\t\t\t\tif (chainId === networks[G.chain].chainId) {\r\n\t\t\t\t\t\tupdate({ status: CONNECTED, address: accounts[0], err: '' })\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terr = ERR_CHAINID.replace(':chainId', String(chainId))\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\terr = ERR_NOACCOUNTS\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\terr = ERR_INSTALL\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\terr = '  ' + error.message\r\n\t\t}\r\n\t\tupdate({ status: DISCONNECTED, address: '', err })\r\n\t}\r\n\tconst getChainId = async () => {\r\n\t\tconst { ethereum } = window\r\n\t\tif (ethereum) {\r\n\t\t\treturn Number(await ethereum.request({ method: 'eth_chainId' }));\r\n\t\t}\r\n\t\treturn 0\r\n\t}\r\n\tconst accountChanged = async (accounts: any) => {\r\n\t\tif (connected) {\r\n\t\t\t_connect(accounts);\r\n\t\t}\r\n\t}\r\n\r\n\tconst chainChanged = async (newChainId) => {\r\n\t\tif (connected) {\r\n\t\t\t_connect();\r\n\t\t}\r\n\t}\r\n\r\n\tconst changeNetwork = async (chainId: number) => {\r\n\t\tif (window.ethereum) {\r\n\t\t\ttry {\r\n\t\t\t\tlet chainHexId = toHex(chainId);\r\n\t\t\t\tlet res = await window.ethereum.request({\r\n\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\r\n\t\t\t\t\tparams: [{ chainId: chainHexId }],\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log(res.code);\r\n\t\t\t\tif (res.code === 4001) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t} catch (error: any) {\r\n\r\n\t\t\t\tconsole.error('changeNetwork');\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t\tif (error.code === 4001) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst connect = async (): Promise<void> => {\r\n\t\t_connect();\r\n\t}\r\n\tconst addNetwork = async () => {\r\n\t\tconst { ethereum } = window\r\n\t\t// if (ethereum) {\r\n\t\t// \tethereum.request({\r\n\t\t// \t\tmethod: 'wallet_addEthereumChain',\r\n\t\t// \t\tparams: [{\r\n\t\t// \t\t\tchainId: toHex(networks.ICICB.chainId),\r\n\t\t// \t\t\tchainName: L['chain.icicb'],\r\n\t\t// \t\t\tnativeCurrency: {\r\n\t\t// \t\t\t\tname: 'ICICB Coin',\r\n\t\t// \t\t\t\tsymbol: 'ICICB',\r\n\t\t// \t\t\t\tdecimals: 18\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\trpcUrls: [networks.ICICB.rpc],\r\n\t\t// \t\t\tblockExplorerUrls: [networks.ICICB.explorer]\r\n\t\t// \t\t}]\r\n\t\t// \t}).catch((error) => {\r\n\t\t// \t\tconsole.log(error)\r\n\t\t// \t})\r\n\t\t// }\r\n\r\n\t}\r\n\r\n\tconst call = async (to: string, abi: any, method: string, args: Array<string | number | boolean>, rpc?: string): Promise<any> => {\r\n\r\n\t\tconst web3 = new window.Web3(rpc || G.rpc)\r\n\t\tconst contract = new web3.eth.Contract(abi, to)\r\n\t\tconsole.log('contract.methods[method](...args).call()')\r\n\t\t// return await call(token, abiFlash, 'balanceOf', [G.address])\r\n\r\n\t\tconsole.log(contract.methods[method](...args).call())\r\n\t\treturn await contract.methods[method](...args).call()\r\n\t}\r\n\r\n\tconst send = async (to: string, abi: any, value: string, method: string, args: Array<string | number | boolean>): Promise<string | undefined> => {\r\n\t\tlet err = '';\r\n\t\ttry {\r\n\t\t\tconst { ethereum } = window\r\n\t\t\tif (ethereum && ethereum.isConnected) {\r\n\t\t\t\tconst web3 = new window.Web3(ethereum)\r\n\t\t\t\tconst contract = new web3.eth.Contract(abi, to)\r\n\t\t\t\tconst data = contract.methods[method](...args).encodeABI()\r\n\t\t\t\tconst json = { from: G.address, to, value, data }\r\n\t\t\t\tconst res = await ethereum.request({ method: 'eth_sendTransaction', params: [json] })\r\n\t\t\t\tif (res) return res\r\n\t\t\t\terr = ERR_UNKNOWN\r\n\t\t\t} else {\r\n\t\t\t\terr = ERR_ASKCONNECT\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tif (error.code === 4001) {\r\n\t\t\t\terr = ERR_CANCELLED\r\n\t\t\t} else if (error.code === -32603) {\r\n\t\t\t\tconst matches = error.message.match(/'(\\{[^']*\\})'/)\r\n\t\t\t\tif (matches.length === 2) {\r\n\t\t\t\t\tlet json: any;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tjson = JSON.parse(matches[1])\r\n\t\t\t\t\t\tif (json.value && json.value.data) {\r\n\t\t\t\t\t\t\tconst { code, message } = json.value.data\r\n\t\t\t\t\t\t\terr = '  ' + message + ' (' + code + ')'\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\terr = '  ' + error.message\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (err1) {\r\n\t\t\t\t\t\terr = '  ' + error.message\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\terr = '  ' + error.message\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\terr = '  ' + error.message\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(err)\r\n\t}\r\n\r\n\tconst waitTransaction = async (txId: string): Promise<boolean> => {\r\n\t\tconst web3 = new window.Web3(G.rpc)\r\n\t\tlet repeat = 100\r\n\t\twhile (--repeat > 0) {\r\n\t\t\tconst receipt = await web3.eth.getTransactionReceipt(txId)\r\n\t\t\tif (receipt) {\r\n\t\t\t\tconst resolvedReceipt = await receipt\r\n\t\t\t\tif (resolvedReceipt && resolvedReceipt.blockNumber) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 3000))\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst balance = async (token: string): Promise<string | undefined> => {\r\n\t\tconst web3 = new window.Web3(G.rpc)\r\n\t\tif (token === '-') {\r\n\t\t\treturn await web3.eth.getBalance(G.address)\r\n\t\t} else {\r\n\t\t\treturn await call(token, abiFlash, 'balanceOf', [G.address])\r\n\t\t}\r\n\t}\r\n\tconst bridgebalance = async (chain: string, token: string): Promise<string | undefined> => {\r\n\t\tconst net = networks[chain]\r\n\r\n\t\tif (token === '-') {\r\n\t\t\tconst web3 = new window.Web3(net.rpc)\r\n\t\t\treturn await web3.eth.getBalance(net.bridge)\r\n\t\t} else {\r\n\t\t\treturn await call(token, abiFlash, 'balanceOf', [net.bridge], net.rpc)\r\n\t\t}\r\n\t}\r\n\r\n\tconst approval = async (token: string): Promise<string | undefined> => {\r\n\t\treturn await call(token, abiFlash, 'allowance', [G.address, networks[G.chain].bridge])\r\n\t}\r\n\r\n\tconst approve = async (token: string, value: string): Promise<string | undefined> => {\r\n\t\treturn await send(token, abiFlash, '0x0', 'approve', [networks[G.chain].bridge, value])\r\n\t}\r\n\r\n\tconst deposit = async (token: string, value: string, targetChain: number): Promise<string | undefined> => {\r\n\t\t// const tx = await G.deposit(token.address==='-' ? ZERO : token.address, value, networks[G.targetChain].chainId)\r\n\t\treturn await send(networks[G.chain].bridge, abiBridge, token === ZERO ? value : '0x0', 'deposit', [token, value, targetChain])\r\n\t}\r\n\r\n\treturn { ...G, update, check, addNetwork, changeNetwork, getPending, setPending, removePending, setTxs, connect, balance, bridgebalance, waitTransaction, approval, approve, /* depositToIcicb,  */deposit };\r\n}\r\n\r\nexport default useWallet_\r\n","import { toast } from 'react-toastify';\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\r\n\r\n\r\nexport const errHandler = (err: any) => {\r\n\tif (err) {\r\n\t\tconsole.log(err)\r\n\t\tif (err.code === 4001) {\r\n\t\t\ttips(\"you have cancelled the subscription\")\r\n\t\t} else if (err.code === 'NETWORK_ERROR') {\r\n\t\t\ttips(\"Please check your network connection!\")\r\n\t\t} else {\r\n\t\t\ttips(err.message)\r\n\t\t}\r\n\t} else {\r\n\t\tconsole.log(\"ignorant error\")\r\n\t\ttips(\"ignorant error\")\r\n\t}\r\n}\r\n\r\nexport const tips = (html: string) => {\r\n\ttoast(html, {\r\n\t\tposition: \"top-right\",\r\n\t\tautoClose: 4000,\r\n\t});\r\n}\r\nexport const NF = (num: number, p: number = 2) => Number(num).toFixed(p).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\nexport const TF = (time: number, offset: number = 2) => {\r\n\tlet iOffset = Number(offset);\r\n\tlet date = time === undefined ? new Date(Date.now() * 1000 + (3600000 * iOffset)) : (typeof time === 'number' ? new Date(time * 1000 + (3600000 * iOffset)) : new Date(+time + (3600000 * iOffset)));\r\n\tlet y = date.getUTCFullYear();\r\n\tlet m = date.getUTCMonth() + 1;\r\n\tlet d = date.getUTCDate();\r\n\tlet hh = date.getUTCHours();\r\n\tlet mm = date.getUTCMinutes();\r\n\tlet ss = date.getUTCSeconds();\r\n\tlet dt = (\"0\" + m).slice(-2) + \"-\" + (\"0\" + d).slice(-2);\r\n\tlet tt = (\"0\" + hh).slice(-2) + \":\" + (\"0\" + mm).slice(-2) + \":\" + (\"0\" + ss).slice(-2);\r\n\treturn y + '-' + dt + ' ' + tt;\r\n}\r\n\r\nexport const copyToClipboard = (text: string) => {\r\n\tvar textField = document.createElement('textarea')\r\n\ttextField.innerText = text\r\n\tdocument.body.appendChild(textField)\r\n\ttextField.select()\r\n\tdocument.execCommand('copy')\r\n\ttextField.remove()\r\n\ttips(text);\r\n};\r\n\r\n\r\n\r\n// export const NETWORK_CHAIN_IDS = {\r\n// \tbsc: 56,\r\n// \tpolygon: 137,\r\n// \tavalanch: 43114,\r\n// \tetherum: 1,\r\n// \tfantom: 250,\r\n// \tcronos: 25,\r\n// \tabitrum: 42161,\r\n// \taurora: 1313161554,\r\n// \tmoonriver: 1285,\r\n// \thamony: 1666600000,\r\n// \tMoonbeam: 1284,\r\n// \tropsten: 3,\r\n// \trinkeby: 4,\r\n// \tgoerli: 5,\r\n// \tkovan: 42,\r\n// \tlocalhost: 1337,\r\n// \tpolygon_test: 80001,\r\n// \tbsc_test: 97,\r\n// \tcronos_test: 338,\r\n\r\n//algorand , polkadot\r\n// };\r\nexport const NETWORK_CHAIN_IDS = [56, 137, 43114, 1, 250, 25, 42161, 1313161554, 1285, 1666600000, 1284, 3, 4, 5, 42, 1337, 80001, 97, 338];\r\n\r\nexport const INFURA_ID = '9aa3d95b3bc440fa88ea12eaa4456161';\r\nexport const INFURA_ENDPOINT = 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161';\r\nexport const walletconnect = new WalletConnectConnector({\r\n\tinfuraId: INFURA_ID,\r\n\tbridge: 'https://bridge.walletconnect.org',\r\n\tsupportedChainIds: NETWORK_CHAIN_IDS,\r\n\trpc: { 1: INFURA_ENDPOINT },\r\n\tqrcode: true,\r\n\t// @ts-ignore\r\n\tpollingInterval: 8000,\r\n});\r\n\r\nexport const injected = new InjectedConnector({\r\n\tsupportedChainIds: NETWORK_CHAIN_IDS\r\n});\r\n\r\nexport const walletlink = new WalletLinkConnector({\r\n\turl: INFURA_ENDPOINT,\r\n\tappName: 'Flash Bridge',\r\n\tsupportedChainIds: NETWORK_CHAIN_IDS,\r\n});\r\n","import { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\r\n\r\nimport { injected, walletconnect, walletlink, tips } from '../util';\r\nimport Web3 from 'web3';\r\nimport {\r\n    NoEthereumProviderError,\r\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector';\r\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector';\r\nimport { useEffect } from 'react';\r\n\r\nconst handleError = (error: any) => {\r\n    if (error instanceof NoEthereumProviderError) {\r\n        return tips(\r\n            'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\r\n        );\r\n    } else if (error instanceof UnsupportedChainIdError) {\r\n        return tips(\"Network Error, Please connect to BSC Mainnet\");\r\n        console.log(error);\r\n    } else if (\r\n        error instanceof UserRejectedRequestErrorInjected ||\r\n        error instanceof UserRejectedRequestErrorWalletConnect\r\n    ) {\r\n        return tips('Please authorize this website to access your BSC account.');\r\n    } else if ((error).code === -32002) {\r\n        return tips('Already processing ethereum request Accounts. Please accept the request.');\r\n    } else {\r\n        console.error(error.toString());\r\n        return tips('An unknown error occurred. Check the console for more details.');\r\n    }\r\n};\r\n\r\nexport const useWallet = () => {\r\n    const { activate, connector, ...props } = useWeb3React();\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n\r\n        if (ethereum) {\r\n            (async () => {\r\n                try {\r\n                    // @ts-ignore\r\n                    const web3 = new Web3(ethereum.currentProvider || (window).web3.currentProvider);\r\n\r\n                    const accounts = await web3.eth.getAccounts();\r\n                    if (accounts.length > 0) {\r\n                        await activate(injected, (error) => handleError(error));\r\n                    } else if (accounts.length > 0) {\r\n                        return tips('Please Connect Metamask Wallet');\r\n                    }\r\n                } catch (err) {\r\n                    // Handle Error\r\n                    handleError(err);\r\n                }\r\n            })();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    const connect = async (type: any) => {\r\n        try {\r\n\r\n            if (type === 'injected') {\r\n                const { ethereum } = window;\r\n                // @ts-ignore\r\n                if (window.web3.currentProvider.isMetaMask) {\r\n                    console.log(\"Metamask is installed\");\r\n                } else {\r\n                    window.location.href = \"https://metamask.io/download\";\r\n                }\r\n                if (!ethereum) {\r\n                    return tips(\r\n                        'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\r\n                    );\r\n                }\r\n                return await activate(injected, undefined, true);\r\n            }\r\n\r\n            if (type === 'walletconnect') {\r\n                console.log(\"wallet connection\", walletconnect);\r\n                // @ts-ignore\r\n                return await activate(walletconnect, undefined, true, (error) => handleError(error));\r\n            }\r\n\r\n            if (type === 'walletlink') {\r\n                // @ts-ignore\r\n                return await activate(walletlink, undefined, true, (error) => handleError(error));\r\n            }\r\n        } catch (err) {\r\n            console.log('Connect wallet err', err);\r\n\r\n            // @ts-ignore\r\n            walletconnect.walletConnectProvider = null;\r\n            handleError(err);\r\n\r\n        }\r\n    };\r\n\r\n    return { ...props, connector, connect };\r\n};\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./layout.scss\";\r\nimport useWallet_, { request } from \"../useWallet\";\r\nimport { useWallet } from \"../hooks/useWallet\";\r\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\r\nimport networks from \"../config/networks.json\";\r\nimport { AiOutlineLinkedin, AiOutlineClose } from \"react-icons/ai\";\r\nimport { readSync } from \"fs\";\r\nimport { tips } from \"../util\";\r\n\r\nconst ERR_INSTALL =\r\n  \"  You must install Metamask into your browser: https://metamask.io/download.html\";\r\nconst ERR_NOACCOUNTS = \"  No selected address.\";\r\nconst ERR_CHAINID = \"  Invalid chain id #:chainId\";\r\nconst DISCONNECTED = \"disconnected\";\r\nconst CONNECTING = \"connecting\";\r\nconst CONNECTED = \"connected\";\r\n\r\nconst Layout = (props: any) => {\r\n  const { active, connect, chainId } = useWallet();\r\n  const U = useWallet_();\r\n  const { account } = useWeb3React();\r\n  const { activate, connector } = useWeb3React();\r\n\r\n  const G = useSelector((state: BridgeTypes) => state);\r\n  const [isLoading, setIsLoadking] = React.useState(true);\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      setIsLoadking(false);\r\n    }, 5000);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    let err = \"\";\r\n    try {\r\n      if (account && account.length) {\r\n        U.update({ status: CONNECTED, address: account, err: \"\" });\r\n        if (chainId === networks[G.chain].chainId) {\r\n          return;\r\n        } else {\r\n          // err = ERR_CHAINID.replace(':chainId', String(chainId))\r\n          U.update({ status: CONNECTED, address: \"\" });\r\n        }\r\n      } else {\r\n        U.update({ status: DISCONNECTED, err: \"\" });\r\n        err = ERR_NOACCOUNTS;\r\n        return;\r\n      }\r\n    } catch (error: any) {\r\n      err = \"  \" + error.message;\r\n      U.update({ err: err });\r\n    }\r\n  }, [account, chainId]);\r\n\r\n  // Chain check\r\n  const ChainCheck = () => {\r\n    try {\r\n      if (G.targetChain === G.chain) {\r\n        U.update({ err: \"Can`t bridge on the same chain\" });\r\n        return tips(\"Can`t bridge on the same chain\");\r\n      } else {\r\n        U.update({ err: \"\" });\r\n      }\r\n      if (chainId === 4690 || chainId === 97 || chainId === 4) {\r\n        // Object.keys(networks).map((k: any) => {\r\n        //     if (Number(networks[k].chainId) === Number(chainId)) {\r\n        //         U.update({ err: '' })\r\n        //         throw new Error(\"error\");\r\n        //         return;\r\n        //     } else {\r\n        //     }\r\n        // })\r\n        return tips(\r\n          \"Unsupported Network, Chain ID : \" +\r\n            chainId +\r\n            \"- Please change network on your wallet\"\r\n        );\r\n      }\r\n    } catch (error: any) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    ChainCheck();\r\n  }, [G.chain]);\r\n\r\n  const L = G.L;\r\n\r\n  const handleConnect = async (key: string) => {\r\n    try {\r\n      if (account && account.length > 0) {\r\n        U.update({\r\n          account: account,\r\n          walletModal: !G.walletModal,\r\n          status: CONNECTED,\r\n        });\r\n      }\r\n      await connect(key);\r\n      U.update({ walletModal: !G.walletModal });\r\n\r\n      // if (account !== undefined) {\r\n      //     dispatch({\r\n      //         type: \"disconnect_able\",\r\n      //         payload: true\r\n      //     });\r\n      // } else {\r\n      //     dispatch({\r\n      //         type: \"disconnect_able\",\r\n      //         payload: false\r\n      //     });\r\n      // }\r\n      //wallet modal cancel\r\n    } catch (err) {\r\n      console.log({ err });\r\n    }\r\n  };\r\n\r\n  const WalletModal = () => {\r\n    return (\r\n      <div className=\"modal-continer\">\r\n        <div\r\n          className=\"modal-back\"\r\n          onClick={() => U.update({ walletModal: false })}\r\n        ></div>\r\n\r\n        <div className=\"modal-body wallet-modal\">\r\n          <div className=\"dis-f w10\" style={{ justifyContent: \"flex-end\" }}>\r\n            <AiOutlineClose\r\n              className=\"cu-po\"\r\n              onClick={() => U.update({ walletModal: false })}\r\n              fontSize={\"25px\"}\r\n            />\r\n          </div>\r\n          <div className=\"dis-f w10\">\r\n            <text className=\"grey mt1 mb2\" style={{ fontSize: \"25px\" }}>\r\n              Connect Wallet\r\n            </text>\r\n          </div>\r\n          <div className=\"justify fd-c\">\r\n            <div className=\"wallet-icon-hover\">\r\n              <a\r\n                onClick={() => {\r\n                  handleConnect(\"injected\");\r\n                  U.update({ walletSelect: \"/img/metamask.png\" });\r\n                }}\r\n              >\r\n                <div className=\"wallet-option-box\">\r\n                  <h4 className=\"\">MetaMask</h4>\r\n                  <img\r\n                    src={\"/img/metamask.png\"}\r\n                    className=\"justify wallet-imgs\"\r\n                    alt=\"Metamask\"\r\n                  />\r\n                </div>\r\n              </a>\r\n            </div>\r\n            {/* <div className='wallet-icon-hover'>\r\n                            <a onClick={() => { handleConnect('walletconnect'); U.update({ walletSelect: '/img/walletconnect.svg' }) }}>\r\n                                <div className='wallet-option-box'>\r\n                                    <h4 className=''>\r\n                                        WalletConnect\r\n                                    </h4>\r\n                                    <img src={'/img/walletconnect.svg'} className='justify wallet-imgs' alt='WalletConnect' />\r\n                                </div>\r\n                            </a>\r\n                        </div>\r\n                        <div className='justify'>\r\n                            <div className='wallet-icon-hover'>\r\n                                <a onClick={() => { handleConnect('walletlink'); U.update({ walletSelect: '/img/coinbase.png' }) }}>\r\n                                    <div className='wallet-option-box'>\r\n                                        <h4 className=''>\r\n                                            Coinbase Wallet\r\n                                        </h4>\r\n                                        <img src={'/img/coinbase.png'} className='justify wallet-imgs' alt='Coinbase' />\r\n                                    </div>\r\n                                </a>\r\n                            </div>\r\n                        </div> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div className=\"isloading\">\r\n          <div className=\"loading-img justify\">\r\n            <img src=\"/img/logo.png\" width={\"70px\"} className=\"\" alt=\"\" />\r\n            <span\r\n              style={{ fontSize: \"30px\", fontWeight: \"bold\", color: \"#13c034\" }}\r\n            >\r\n              TranshumanCoin\r\n            </span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"dis-f fd-c\" style={{ height: \"100%\" }}>\r\n            <header className=\"dis-f jc-sb ai-c pr2\">\r\n              <Link className=\"title justify\" to=\"/\">\r\n                <div>\r\n                  <img\r\n                    src=\"/logo.png\"\r\n                    style={{ width: 50, height: \"auto\" }}\r\n                    alt=\"logo\"\r\n                  />\r\n                </div>\r\n                <div className=\"dis-f\">\r\n                  <span\r\n                    className=\"h3 primary-color\"\r\n                    style={{ marginTop: \"-7px\" }}\r\n                  >\r\n                    TranshumanCoin\r\n                  </span>\r\n                </div>\r\n                {/* <span className=\"badge\">{L['bridge']}</span> */}\r\n              </Link>\r\n              {G.status !== DISCONNECTED ? (\r\n                <button\r\n                  onClick={() => {\r\n                    U.update({ walletModal: false, status: DISCONNECTED });\r\n                  }}\r\n                  className=\"wallet-connect-btn\"\r\n                >\r\n                  {\"Disconnect\"}\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={() => {\r\n                    U.update({ walletModal: true });\r\n                  }}\r\n                  className=\"wallet-connect-btn\"\r\n                >\r\n                  {G.status === DISCONNECTED\r\n                    ? \"Connect Wallet\"\r\n                    : account &&\r\n                      account.slice(0, 5) +\r\n                        \"...\" +\r\n                        account.slice(account.length - 5, account.length)}\r\n                </button>\r\n              )}\r\n            </header>\r\n            <main className=\"dis-f flex1 fd-c\">{props.children}</main>\r\n            <footer className=\"footer-section\">\r\n              <nav className=\"social-list\">\r\n                <a href=\"/\">\r\n                  {\" \"}\r\n                  <img src=\"/social/twitter.svg\" alt=\"twitter\" />{\" \"}\r\n                </a>\r\n                <a href=\"/\" target=\"_blank\">\r\n                  {\" \"}\r\n                  <img src=\"/social/facebook.svg\" alt=\"facebook\" />{\" \"}\r\n                </a>\r\n                <a href=\"/\" target=\"_blank\">\r\n                  {\" \"}\r\n                  <img src=\"/social/reddit.svg\" alt=\"reddit\" />{\" \"}\r\n                </a>\r\n                <a href=\"/\">\r\n                  {\" \"}\r\n                  <img src=\"/social/telegram.svg\" alt=\"telegram\" />{\" \"}\r\n                </a>\r\n                <a href=\"/\">\r\n                  {\" \"}\r\n                  <img src=\"/social/mail.svg\" alt=\"mail\" />{\" \"}\r\n                </a>\r\n                <a href=\"/\">\r\n                  {\" \"}\r\n                  <img src=\"/social/discord.svg\" alt=\"discord\" />{\" \"}\r\n                </a>\r\n                <a href=\"/\" target=\"_blank\">\r\n                  {\" \"}\r\n                  <img src=\"/social/youtube.svg\" alt=\"youtube\" />{\" \"}\r\n                </a>\r\n                <a href=\"/\" target=\"_blank\">\r\n                  {\" \"}\r\n                  <AiOutlineLinkedin color=\"white\" fontSize={\"27px\"} />{\" \"}\r\n                </a>\r\n              </nav>\r\n              <div className=\"dis-f ai-c jc-c w10 tc pb3\">\r\n                © Copyright Flash Technologies 2022&nbsp;,&nbsp;{\" \"}\r\n                <a className=\"primary-color\" href=\"/\">\r\n                  TranshumanCoin LINK\r\n                </a>\r\n              </div>\r\n            </footer>\r\n          </div>\r\n          {G.walletModal === true ? <WalletModal /> : <></>}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport Layout from \"../components/Layout\";\r\nimport Networks from \"../config/networks.json\";\r\nimport VirtualNetworks from \"../config/static_networks.json\";\r\nimport TokenList from \"../config/tokenlist.json\";\r\nimport { useWallet } from \"../hooks/useWallet\";\r\n\r\nimport useWallet_, {\r\n  request,\r\n  CONNECTED,\r\n  CONNECTING,\r\n  DISCONNECTED,\r\n  ZERO,\r\n  toEther,\r\n  fromEther,\r\n} from \"../useWallet\";\r\n/* import { getApiUrl } from '../util'; */\r\nimport { BsChevronDown } from \"react-icons/bs\";\r\nimport {\r\n  AiFillStar,\r\n  AiOutlineStar,\r\n  AiTwotoneStar,\r\n  AiOutlineUp,\r\n  AiOutlineQuestionCircle,\r\n} from \"react-icons/ai\";\r\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\r\nimport { useStore } from \"react-redux\";\r\nimport \"./Home.scss\";\r\n\r\nconst ERR_NOACCOUNTS = \"No selected address.\";\r\nconst ERR_CHAINID = \"Invalid chain id #:chainId\";\r\n\r\nconst networks = Networks as { [chain: string]: NetworkTypes };\r\n\r\ninterface HomeStatus {\r\n  query: string;\r\n  submitLabel: string;\r\n  loading: boolean;\r\n}\r\n\r\ninterface TransactionDetails {\r\n  providerFee: number;\r\n  protocalFee: number;\r\n  slippage: number;\r\n  value: string;\r\n  fee: number;\r\n  receiveValue: number;\r\n}\r\n\r\ninterface BaseStatus {\r\n  prices: { [chain: string]: number };\r\n  gasPrices: { [chain: string]: number };\r\n  maxGasLimit: number;\r\n}\r\n\r\nconst Home = () => {\r\n  const { account } = useWeb3React();\r\n  const { active, connect, chainId } = useWallet();\r\n  const G = useWallet_();\r\n  const L = G.L;\r\n  const refMenu = React.useRef<HTMLUListElement>(null);\r\n  // const refList = React.useRef<HTMLInputElement>(null)\r\n  const refAmount = React.useRef<HTMLInputElement>(null);\r\n  const [THCPrice, setTHCprice] = React.useState(Number);\r\n  const [countTHCPrice, setCountTHCPrice] = React.useState<Number>(THCPrice);\r\n  const [status, setStatus] = React.useState<HomeStatus>({\r\n    query: \"\",\r\n    submitLabel: \"\",\r\n    loading: false,\r\n  });\r\n\r\n  const [txDetail, setTxDetail] = React.useState<TransactionDetails>({\r\n    providerFee: 0,\r\n    protocalFee: 0,\r\n    slippage: 0,\r\n    value: \"\",\r\n    fee: 0,\r\n    receiveValue: 0,\r\n  });\r\n  const set = (attrs: Partial<TransactionDetails>) =>\r\n    setTxDetail({ ...txDetail, ...attrs });\r\n  const [isPending, setPending] = React.useState(false);\r\n  // const [issure, setIsSure] = React.useState(false);\r\n  const [noTargetChain, setNotargetChain] = React.useState(false);\r\n  const [tokenSelectModal, setTokenSelectModal] = React.useState(false);\r\n  const [isActive, setIsActive] = React.useState(\"\");\r\n  const [isTransaction, setIsTransaction] = React.useState(false);\r\n  const [selectedTokenOnChain, setSelectedTokenOnChain] = React.useState({\r\n    name: \"Token Select\",\r\n    img: \"\",\r\n  });\r\n  const [selectedTokenOnTargetChain, setSelectedTokenOnTargetChain] =\r\n    React.useState({\r\n      name: \"Token Select\",\r\n      img: \"\",\r\n    });\r\n  const [base, setBase] = React.useState<BaseStatus>({\r\n    prices: {},\r\n    gasPrices: {},\r\n    maxGasLimit: 1e5,\r\n  });\r\n\r\n  const updateStatus = (json) => setStatus({ ...status, ...json });\r\n\r\n  React.useEffect(() => {\r\n    try {\r\n      if (!G.inited && !G.loading) {\r\n        G.update({ loading: true });\r\n        // request('/get-all-tokens').then(response => {\r\n        // \talert('backend call')\r\n        // \tif (response && response.result) {\r\n        // \t\tconst res = response.result\r\n        // \t\tconsole.log(res)\r\n        // \t\talert('res')\r\n        // \t\tconst coins = {} as CoinTypes\r\n        // \t\tfor (let chain in res) {\r\n        // \t\t\tfor (let i in res[chain]) {\r\n        // \t\t\t\tconst v = res[chain][i]\r\n        // \t\t\t\tif (coins[v.symbol] === undefined)\r\n        // \t\t\t\t\tcoins[v.symbol] = {}\r\n\r\n        // \t\t\t\tcoins[v.symbol][chain.toUpperCase()] = { address: v.address, decimals: v.decimals }\r\n        // \t\t\t}\r\n        // \t\t}\r\n        // \t\tcheckPending()\r\n        // \t\tG.update({ coins, ...G.getPending(), inited: true, loading: false })\r\n        // \t} else {\r\n        // \t\talert('res no')\r\n\r\n        // \t\tG.update({ loading: false })\r\n        // \t}\r\n        // })\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (isPending) return;\r\n    let timer;\r\n    try {\r\n      timer = setTimeout(checkPending, 5000);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    return () => timer && clearTimeout(timer);\r\n  }, [isPending]);\r\n\r\n  // Chain check\r\n  React.useEffect(() => {\r\n    if (G.targetChain === G.chain) {\r\n      G.update({ err: \"Can`t bridge on the same chain\" });\r\n      updateStatus({ loading: false });\r\n    } else {\r\n      G.update({ err: \"\" });\r\n      updateStatus({ loading: false });\r\n    }\r\n    // if (Number(G.chain) !== chainId) {\r\n    // \tG.update({ err: 'Please change chain on your wallet. Connected chain ID : ' + chainId })\r\n    // }\r\n  }, [G.targetChain, G.chain]);\r\n\r\n  //network gas fee\r\n  const [time, setTime] = React.useState(+new Date());\r\n  const proxy = process.env.REACT_APP_ENDPOINT || \"\";\r\n  React.useEffect(() => {\r\n    getInfo();\r\n    const timer = setTimeout(() => setTime(+new Date()), 10000);\r\n    return () => clearTimeout(timer);\r\n  }, [time, G.chain]);\r\n  const getInfo = async () => {\r\n    try {\r\n      const res = await request(\"/get-gas-info\", { chain: G.chain });\r\n\r\n      console.log(res?.result);\r\n      console.log(Math.round(+new Date() / 1000), res?.result);\r\n      setBase(res?.result);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const getReceivedValue = (\r\n    chain: string,\r\n    targetChain: string,\r\n    token: string,\r\n    amount: number\r\n  ) => {\r\n    if (base.gasPrices !== undefined) {\r\n      const feeEther = (base.maxGasLimit * base.prices[chain]) / 1e9;\r\n      // const decimals = networks[targetChain].decimals;\r\n      // const fee = Number((feeEther * base.prices[targetChain] / THCPrice).toFixed(decimals < 6 ? decimals : 6))\r\n      // if (!isNaN(fee)) {\r\n      // const receiveValue = Number((amount - fee).toFixed(decimals < 6 ? decimals : 6))\r\n      // return { receiveValue, fee }\r\n      // }\r\n      return { feeEther };\r\n    }\r\n    return { receiveValue: 0, fee: 0 };\r\n  };\r\n\r\n  const onChangeValueOnChain = (value: string) => {\r\n    const { feeEther } = getReceivedValue(\r\n      G.chain,\r\n      G.targetChain,\r\n      G.token,\r\n      Number(value)\r\n    );\r\n    console.log(feeEther);\r\n    set({ value, receiveValue: Number(value), fee: feeEther });\r\n  };\r\n  // React.useEffect(async()=>{\r\n  // \tlet estimateGas = await web3.eth.estimateGas({\r\n  // \t\t\"value\": '0x0', // Only tokens\r\n  // \t\t\"data\": contract.methods.transfer(toAddress, tokenAmount).encodeABI(),\r\n  // \t\t\"from\": fromAddress,\r\n  // \t\t\"to\": toAddress\r\n  // \t});\r\n  // },[])\r\n  const THCprice = async () => {\r\n    const url =\r\n      \"https://api.coinmarketcap.com/data-api/v3/cryptocurrency/detail/chart?id=14452&range=1H\";\r\n    const data = {\r\n      url: url,\r\n    };\r\n\r\n    const result = await request(\"/flash-coin-price\", { data });\r\n\r\n    // const result = await fetch('',\r\n    // \t{\r\n    // \t\tmethod: 'GET',\r\n    // \t\theaders: { 'content-type': 'application/json' },\r\n    // \t});\r\n\r\n    const priceresult: any = result;\r\n    // priceresult.data.accuracyPoints[0].ypoint.settlementPrice\r\n    console.log(\" priceresult \");\r\n    console.log(priceresult.data);\r\n\r\n    // setTHCprice(\r\n    //   priceresult.data.accuracyPoints[0].ypoint.settlementPrice.toFixed(8)\r\n    // );\r\n    // setCountTHCPrice(\r\n    //   priceresult.data.accuracyPoints[0].ypoint.settlementPrice.toFixed(8)\r\n    // );\r\n  };\r\n\r\n  const InputChainInfo = async () => {\r\n    const token = G.token;\r\n    const info = G.thccoins;\r\n    const result = await request(\"/input-chain-info\", { info, token });\r\n    console.log(\"InputChainInfo succeed\");\r\n\r\n    console.log(result);\r\n  };\r\n\r\n  // Input chain info\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      THCprice();\r\n      InputChainInfo();\r\n    }, 2000);\r\n  }, []);\r\n\r\n  const [fake_dis, setFake_dis] = React.useState(true);\r\n  const onChangeNetwork = (chain: string) => {\r\n    ChainActive(chain);\r\n    const _chain = \"chain\";\r\n    if (chain === \"IOTEX\" || chain === \"BSC\" || chain === \"ETH\") {\r\n      setFake_dis(true);\r\n\r\n      const net = networks[chain];\r\n      const chainId = net.chainId;\r\n      const rpc = net.rpc;\r\n      G.update({ [_chain]: chain });\r\n      G.update({ chainIdMatch: chainId, rpc });\r\n      G.changeNetwork(chainId);\r\n    } else {\r\n      setFake_dis(false);\r\n      // G.update({ [_chain]: chain })\r\n    }\r\n\r\n    // if (refMenu && refMenu.current) {\r\n    // \trefMenu.current.style.display = 'none'\r\n    // \tsetTimeout(() => (refMenu && refMenu.current && (refMenu.current.style.display = '')), 100)\r\n    // }\r\n  };\r\n  const onChangeNetwork2 = (chain: string) => {\r\n    ChainActive(chain);\r\n    // setIsSure(true);\r\n    const _chain = \"targetChain\";\r\n    if (chain === \"IOTEX\" || chain === \"BSC\" || chain === \"ETH\") {\r\n      setFake_dis(true);\r\n\r\n      const net = networks[chain];\r\n      const chainId = net.chainId;\r\n      const rpc = net.rpc;\r\n      G.update({ [_chain]: chain, chainId });\r\n    } else {\r\n      setFake_dis(false);\r\n\r\n      // G.update({ [_chain]: chain })\r\n    }\r\n  };\r\n\r\n  const swapChains = async () => {\r\n    const net = networks[G.targetChain];\r\n    const chainId = net.chainId;\r\n    const rpc = net.rpc;\r\n\r\n    const res = await G.changeNetwork(chainId);\r\n    console.log(\"swapChains\");\r\n    console.log(res);\r\n    if (res) {\r\n      G.update({\r\n        chain: G.targetChain,\r\n        targetChain: G.chain,\r\n        /* token, */ chainId,\r\n        rpc,\r\n      });\r\n    }\r\n  };\r\n  const checkPending = async () => {\r\n    try {\r\n      if (!isPending) {\r\n        setPending(true);\r\n        const params1: { [chainId: string]: Array<string> } = {};\r\n        const params2: Array<string> = [];\r\n        for (let k in G.pending) {\r\n          const v = G.pending[k];\r\n          const confirmations = G.txs[k]?.confirmations || 0;\r\n          if (networks[v.chain].confirmations > confirmations) {\r\n            if (params1[v.chain] === undefined) params1[v.chain] = [];\r\n            params1[v.chain].push(k);\r\n          } else {\r\n            if (G.txs[k] && !G.txs[k].err && !G.txs[k].tx) params2.push(k);\r\n          }\r\n        }\r\n        if (Object.keys(params1).length) {\r\n          const res = await Promise.all(\r\n            Object.keys(params1).map((k) => G.check(k, params1[k]))\r\n          );\r\n          const txs: TxTypes = { ...G.txs };\r\n          const now = Math.round(new Date().getTime() / 1000);\r\n          for (let v of res) {\r\n            if (v) {\r\n              for (let k in v) {\r\n                if (v[k] === -1) {\r\n                  if (now - G.pending[k].created > 600)\r\n                    txs[k] = { ...txs[k], err: true };\r\n                } else {\r\n                  txs[k] = { ...txs[k], confirmations: v[k] };\r\n                }\r\n              }\r\n            }\r\n          }\r\n          G.setTxs(txs);\r\n        }\r\n        if (params2.length) {\r\n          const rows = await request(\"/get-txs\", params2);\r\n          if (rows && Array.isArray(rows)) {\r\n            const now = Math.round(new Date().getTime() / 1000);\r\n            const txs: TxTypes = { ...G.txs };\r\n            for (let v of rows) {\r\n              if (v.tx || (v.err && now - G.pending[v.key].created > 600)) {\r\n                txs[v.key] = {\r\n                  ...txs[v.key],\r\n                  tx: v.tx,\r\n                  err: v.err,\r\n                  fee: v.fee,\r\n                };\r\n              }\r\n            }\r\n            G.setTxs(txs);\r\n          }\r\n        }\r\n        setPending(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  // const onChangeQuery = (query: string) => {\r\n  // \tupdateStatus({ query })\r\n  // }\r\n  // const onChangeToken = (token: string) => {\r\n  // \tG.update({ token })\r\n  // \tif (refList && refList.current) {\r\n  // \t\trefList.current.checked = false\r\n  // \t}\r\n  // }\r\n  const onChangeValue = (value: string) => {\r\n    setCountTHCPrice(Number(value) * THCPrice);\r\n    G.update({ value });\r\n  };\r\n  const submit = async () => {\r\n    try {\r\n      console.log(G.targetChain, G.chain);\r\n      if (G.targetChain !== G.chain) {\r\n        if (G.status === CONNECTED) {\r\n          console.log(G.token);\r\n          console.log(G.chain);\r\n          console.log(G.coins);\r\n\r\n          const token = G.thccoins[G.chain];\r\n          const targetToken = G.thccoins[G.targetChain];\r\n\r\n          const amount = Number(G.value);\r\n          const value = fromEther(amount, token.decimal);\r\n\r\n          if (token && amount > 0) {\r\n            G.update({ err: \"\" });\r\n            updateStatus({ loading: true, submitLabel: \"checking balance...\" });\r\n            const rbalance = await G.balance(token.address);\r\n            // const rbalance1 = G.targetChain === 'ICICB' ? value : await G.bridgebalance(G.targetChain, targetToken.address)\r\n            const rbalance1 = await G.bridgebalance(\r\n              G.targetChain,\r\n              targetToken.address\r\n            );\r\n            if (rbalance !== undefined && rbalance1 !== undefined) {\r\n              const balance = toEther(rbalance, token.decimal);\r\n              const balance1 = toEther(rbalance1, targetToken.decimal);\r\n              if (balance >= amount) {\r\n                if (balance1 >= amount) {\r\n                  let success = true;\r\n                  if (token.address !== \"-\") {\r\n                    //'-' is Native token address\r\n                    updateStatus({\r\n                      loading: true,\r\n                      submitLabel: \"checking allowance...\",\r\n                    });\r\n                    const rApproval = await G.approval(token.address);\r\n                    if (rApproval !== undefined) {\r\n                      const approval = toEther(rApproval, token.decimal);\r\n                      console.log(\r\n                        \"approval\",\r\n                        approval,\r\n                        \"decimal\",\r\n                        token.decimal\r\n                      );\r\n                      if (approval < amount) {\r\n                        updateStatus({\r\n                          loading: true,\r\n                          submitLabel: \"allow bridge contract ...\",\r\n                        });\r\n                        let tx = await G.approve(token.address, value);\r\n                        if (tx !== undefined) {\r\n                          success = await G.waitTransaction(tx);\r\n                        } else {\r\n                          success = false;\r\n                        }\r\n                      }\r\n                    } else {\r\n                      success = false;\r\n                    }\r\n                  }\r\n                  if (success) {\r\n                    updateStatus({\r\n                      loading: true,\r\n                      submitLabel: \"exchanging...\",\r\n                    });\r\n                    const tx = await G.deposit(\r\n                      token.address === \"-\" ? ZERO : token.address,\r\n                      value,\r\n                      networks[G.targetChain].chainId\r\n                    );\r\n                    if (tx !== undefined) {\r\n                      updateStatus({\r\n                        loading: true,\r\n                        submitLabel: \"confirming...\",\r\n                      });\r\n                      G.setPending(tx, {\r\n                        chain: G.chain,\r\n                        targetChain: G.targetChain,\r\n                        address: G.address,\r\n                        token: G.token,\r\n                        value: amount,\r\n                        created: Math.round(new Date().getTime() / 1000),\r\n                      });\r\n                      await G.waitTransaction(tx);\r\n                      G.update({ value: \"\" });\r\n                    }\r\n                  } else {\r\n                    G.update({ err: \"the transaction failed\" });\r\n                  }\r\n                } else {\r\n                  G.update({\r\n                    err: \"Sorry, there is not enough balance in the bridge store for swap.\",\r\n                  });\r\n                }\r\n              } else {\r\n                G.update({ err: \"You haven't enough balance for swap\" });\r\n              }\r\n            }\r\n          } else if (refAmount?.current) {\r\n            refAmount.current.focus();\r\n          }\r\n          updateStatus({ loading: false });\r\n        } else {\r\n          updateStatus({ submitLabel: \"Connecting...\" });\r\n          G.connect();\r\n        }\r\n      } else {\r\n        G.update({ err: \"Can`t bridge on the same chain\" });\r\n        updateStatus({ loading: false });\r\n      }\r\n    } catch (err: any) {\r\n      G.update({ err: err.message });\r\n      updateStatus({ loading: false });\r\n    }\r\n  };\r\n\r\n  // @ts-ignore\r\n  const chainSelectActive = useRef(null);\r\n\r\n  // for design effect\r\n  const ChainActive = (id: any) => {\r\n    console.log(id);\r\n    if (isActive !== \"\") {\r\n      window.document.getElementById(`${isActive}`)?.classList.remove(\"active\");\r\n    }\r\n    if (id !== \"\") {\r\n      setIsActive(id);\r\n      window.document.getElementById(`${id}`)?.classList.add(\"active\");\r\n    }\r\n    // chainSelectActive.id.classList.toggle('active');\r\n  };\r\n  const TokenSelectNameImageUpdate = (value: string, para: boolean) => {\r\n    if (para) {\r\n      setSelectedTokenOnChain({ name: value, img: value.toLocaleLowerCase() });\r\n    } else {\r\n      setSelectedTokenOnTargetChain({\r\n        name: value,\r\n        img: value.toLocaleLowerCase(),\r\n      });\r\n    }\r\n  };\r\n  const CallTokenSelect = (value: string, para: boolean) => {\r\n    setTokenSelectModal(false);\r\n    TokenSelectNameImageUpdate(value, para);\r\n  };\r\n\r\n  const TokenSelect = (para: boolean) => {\r\n    return (\r\n      <>\r\n        <div className=\"token-select-modal\">\r\n          <div\r\n            className=\"token-select-modal-bg\"\r\n            onClick={() => setTokenSelectModal(false)}\r\n          ></div>\r\n          <div className=\"token-select-modal-body\">\r\n            <div className=\"p2\">\r\n              <div className=\"justify p1\">\r\n                <div className=\"\">\r\n                  <h3 style={{ margin: \"0\", color: \"#f3ba2f\" }}>Token List</h3>\r\n                </div>\r\n                <div\r\n                  className=\"token-select-modal-cancel\"\r\n                  onClick={() => setTokenSelectModal(false)}\r\n                >\r\n                  X\r\n                </div>\r\n              </div>\r\n              {/* <div className='justify p1'>\r\n\t\t\t\t\t\t\t\t<div className=''>\r\n\t\t\t\t\t\t\t\t\t<input placeholder='Search name or paste address' />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div> */}\r\n            </div>\r\n            <div className=\"row\">\r\n              <div\r\n                className=\"col-sm-4 col-md-3\"\r\n                style={{ borderTop: \"1px grey solid\" }}\r\n              >\r\n                <div\r\n                  className=\"chain-list-side-bar\"\r\n                  style={{\r\n                    background: \"#2b2d2c\",\r\n                    padding: \"10px\",\r\n                    height: `${\r\n                      window.innerWidth <= 567\r\n                        ? window.innerHeight - 90\r\n                        : \"100%\"\r\n                    }px`,\r\n                  }}\r\n                >\r\n                  {/* virtual networks */}\r\n                  {Object.keys(VirtualNetworks).map((k) => (\r\n                    <a\r\n                      key={k}\r\n                      className=\"justify fd-c\"\r\n                      style={{ width: \"100%\" }}\r\n                      onClick={(e: any) =>\r\n                        para ? onChangeNetwork(k) : onChangeNetwork2(k)\r\n                      }\r\n                    >\r\n                      <li\r\n                        ref={chainSelectActive}\r\n                        id={k}\r\n                        className={\"chain-select justify w10\"}\r\n                      >\r\n                        <img\r\n                          style={{ borderRadius: \"50%\" }}\r\n                          className=\"icon\"\r\n                          width={\"35px\"}\r\n                          height={\"35px\"}\r\n                          src={`/networks/${VirtualNetworks[k].img}`}\r\n                          alt={k}\r\n                        />\r\n                        <span className=\"tc\">{k.toUpperCase()} Chain</span>\r\n                      </li>\r\n                    </a>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"col-sm-8 col-md-9 pr1 pl1\"\r\n                style={{ borderTop: \"1px grey solid\" }}\r\n              >\r\n                {fake_dis ? (\r\n                  Object.keys(TokenList).map((key, index) => (\r\n                    <div key={index} className=\"justify pr1\">\r\n                      <div\r\n                        onClick={() => CallTokenSelect(key, para)}\r\n                        className=\"justify mt2 w10 token-hover\"\r\n                      >\r\n                        <div className=\"justify\">\r\n                          <img\r\n                            className=\"icon\"\r\n                            width={\"60px\"}\r\n                            src={`/select-token/${key.toLocaleLowerCase()}.png`}\r\n                            alt={key}\r\n                          />\r\n                          &nbsp;&nbsp;&nbsp;&nbsp;\r\n                          <h4\r\n                            className=\"\"\r\n                            style={{ margin: \"0\", padding: \"0\" }}\r\n                          >\r\n                            {key} <br />\r\n                            {TokenList[key].name}\r\n                          </h4>\r\n                        </div>\r\n                        <div className=\"pr1\">\r\n                          <AiOutlineStar fontSize={\"30px\"} color=\"yellow\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n  const pendingTxs: Array<any> = [];\r\n  const targetToken = G.coins[G.token] && G.coins[G.token][G.targetChain];\r\n  const supported = targetToken !== undefined;\r\n\r\n  // const erc20 = networks[G.chain].erc20;\r\n  // const query = status.query.toLowerCase();\r\n\r\n  for (let k in G.pending) {\r\n    pendingTxs.push({ key: k, ...G.pending[k] });\r\n  }\r\n  pendingTxs.sort((a, b) => b.created - a.created);\r\n\r\n  // const nativeCoin = networks[G.chain].coin\r\n  // const tokenArray: Array<string> = [nativeCoin];\r\n  // for (let k in G.coins) {\r\n  // \tif (k === nativeCoin) continue\r\n  // \tconst v = G.coins[k]\r\n  // \tif (v[G.chain] !== undefined && v[G.targetChain] !== undefined) {\r\n  // \t\tif (query !== '' && k.toLowerCase().indexOf(query) === -1) continue\r\n  // \t\ttokenArray.push(k)\r\n  // \t}\r\n  // }\r\n  let loading = G.status === CONNECTING || status.loading;\r\n\r\n  // Wallet connect monitor\r\n  React.useEffect(() => {\r\n    let err = \"\";\r\n    try {\r\n      if (account && account.length) {\r\n        G.update({ address: account, err: \"\" });\r\n        if (chainId === networks[G.chain].chainId) {\r\n          G.update({ status: CONNECTED, address: account, err: \"\" });\r\n          return;\r\n        } else {\r\n          err = ERR_CHAINID.replace(\":chainId\", String(chainId));\r\n          return;\r\n        }\r\n      } else {\r\n        err = ERR_NOACCOUNTS;\r\n        return;\r\n      }\r\n    } catch (error: any) {\r\n      err = \"  \" + error.message;\r\n    }\r\n    G.update({ status: DISCONNECTED, address: \"\", err });\r\n  }, [account]);\r\n\r\n  return (\r\n    <Layout className=\"home\">\r\n      <section>\r\n        <div className=\"c ml3-md\">\r\n          <div className=\"panel swap\">\r\n            <div className=\"justify\">\r\n              <div className=\"justify\">\r\n                <div className=\"justify\">\r\n                  <img\r\n                    alt=\"\"\r\n                    style={{ width: \"35px\" }}\r\n                    src={`./networks/${G.chain}.svg`}\r\n                  ></img>\r\n                  <img\r\n                    alt=\"\"\r\n                    style={{\r\n                      width: \"39px\",\r\n                      marginLeft: \"-13px\",\r\n                      border: \"3px black solid\",\r\n                      borderRadius: \"50%\",\r\n                    }}\r\n                    src={`./networks/${G.targetChain}.svg`}\r\n                  ></img>\r\n                </div>\r\n                <div className=\"ml1\">\r\n                  <div className=\"justify\">\r\n                    <span className={`chain-font opa1i`}>Multichain</span>\r\n                  </div>\r\n                  <div className=\"justify\">\r\n                    <span className=\"chain-font\">{G.chain}</span>\r\n                    <span className=\"chain-font\">\r\n                      &nbsp;&nbsp;to&nbsp;&nbsp;\r\n                    </span>\r\n                    <span className=\"chain-font\">{G.targetChain}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"\"></div>\r\n            </div>\r\n            {/* <div className=\"flex\">\r\n\t\t\t\t\t\t<div className=\"c\">\r\n\t\t\t\t\t\t\t{ViewNetwork(G.chain)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"c\">\r\n\t\t\t\t\t\t\t{ViewNetwork2(G.targetChain)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div> */}\r\n            {tokenSelectModal === true && (\r\n              <>{noTargetChain ? TokenSelect(true) : TokenSelect(false)}</>\r\n            )}\r\n            <div className=\"dis-f jc-sb mt2\">\r\n              <div className=\"\">\r\n                <button\r\n                  onClick={() => {\r\n                    setNotargetChain(true);\r\n                    setTokenSelectModal(true);\r\n                  }}\r\n                  className=\"token-select-btn\"\r\n                >\r\n                  <div className=\"justify\">\r\n                    {selectedTokenOnChain.img ? (\r\n                      <img\r\n                        style={{ width: \"20px\", height: \"20px\" }}\r\n                        alt={selectedTokenOnChain.name}\r\n                        src={`/select-token/${selectedTokenOnChain.img}.png`}\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    &nbsp;\r\n                    {selectedTokenOnChain.name}\r\n                    &nbsp;\r\n                    <BsChevronDown color=\"yellow\" />\r\n                  </div>\r\n                </button>\r\n              </div>\r\n              <div className=\"dis-f fd-c\">\r\n                <input\r\n                  ref={refAmount}\r\n                  className=\"amount tr\"\r\n                  type=\"input\"\r\n                  value={G.value}\r\n                  onChange={(e) => {\r\n                    onChangeValue(e.target.value);\r\n                    onChangeValueOnChain(e.target.value);\r\n                  }}\r\n                />\r\n                <div className=\"tr input-price\">{countTHCPrice} $</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt2\">\r\n              <div className=\"po-re before-af w10\">\r\n                <div className=\"swap-switcher\">\r\n                  <button onClick={() => swapChains()} className=\"switcher\">\r\n                    <img src=\"./img/swap.svg\" alt=\"\"></img>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"dis-f jc-sb mt6\">\r\n              <div className=\"\">\r\n                <button\r\n                  onClick={() => {\r\n                    setNotargetChain(false);\r\n                    setTokenSelectModal(true);\r\n                  }}\r\n                  className=\"token-select-btn\"\r\n                >\r\n                  <div className=\"justify\">\r\n                    {selectedTokenOnTargetChain.img ? (\r\n                      <img\r\n                        style={{ width: \"20px\", height: \"20px\" }}\r\n                        alt={selectedTokenOnTargetChain.name}\r\n                        src={`/select-token/${selectedTokenOnTargetChain.img}.png`}\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    &nbsp;\r\n                    {selectedTokenOnTargetChain.name}\r\n                    &nbsp;\r\n                    <BsChevronDown color=\"yellow\" />\r\n                  </div>\r\n                </button>\r\n              </div>\r\n              <div className=\"dis-f fd-c\">\r\n                <input\r\n                  ref={refAmount}\r\n                  className=\"amount tr\"\r\n                  type=\"input\"\r\n                  value={G.value}\r\n                  onChange={(e) => onChangeValue(e.target.value)}\r\n                />\r\n                <div className=\"tr input-price\">{countTHCPrice} $</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"justify po-re mt5 pr2 pl2\">\r\n              <div className=\"dis-f fd-c jc-c ai-c tc\">\r\n                <img alt=\"\" className=\"mauto\" src=\"/logo.png\" width={\"35px\"} />\r\n                <span className=\"chain-font\">{G.chain}</span>\r\n              </div>\r\n              <div className=\"flex1 dis-f fd-c jc-c ai-c tc\">\r\n                <div className=\"dashboard-line\"></div>\r\n                <br />\r\n              </div>\r\n              <div className=\"dis-f fd-c jc-c ai-c tc po-re\">\r\n                <img alt=\"\" className=\"mauto\" src=\"/logo.png\" width={\"35px\"} />\r\n                <br />\r\n                <span className=\"chain-font flash-bridge\">Bridge</span>\r\n              </div>\r\n              <div className=\"flex1 dis-f fd-c jc-c ai-c tc\">\r\n                <div className=\"dashboard-line\"></div>\r\n                <br />\r\n              </div>\r\n              <div className=\"dis-f fd-c jc-c ai-c tc\">\r\n                <img alt=\"\" className=\"mauto\" src=\"/logo.png\" width={\"35px\"} />\r\n                <span className=\"chain-font\">{G.targetChain}</span>\r\n              </div>\r\n            </div>\r\n\r\n            {G.inited ? (\r\n              !supported ? (\r\n                <p\r\n                  style={{\r\n                    color: \"red\",\r\n                    backgroundColor: \"#2b2f36\",\r\n                    padding: 10,\r\n                  }}\r\n                >{`We do not support ${\r\n                  L[\"chain.\" + G.targetChain.toLowerCase()]\r\n                }'s ${G.token} swap now.`}</p>\r\n              ) : null\r\n            ) : null}\r\n            {/* <p style={{ color: 'red', backgroundColor: '#2b2f36', padding: 10 }}>{`We do not support ${G.targetChain}`}</p> */}\r\n\r\n            {/* <div className=\"label\" style={{ paddingTop: 20 }}>Amount</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input ref={refAmount} className=\"amount\" type=\"number\" value={G.value} onChange={(e) => onChangeValue(e.target.value)} />\r\n\t\t\t\t\t</div> */}\r\n\r\n            {G.value !== \"\" && targetToken ? (\r\n              <p className=\"gray\">\r\n                You will receive ≈ {G.value}{\" \"}\r\n                {G.token === \"-\" ? networks[G.chain].coin : G.token}{\" \"}\r\n                <small>\r\n                  (\r\n                  {targetToken.address === \"-\"\r\n                    ? \"native token\"\r\n                    : networks[G.targetChain].erc20}\r\n                  )\r\n                </small>\r\n              </p>\r\n            ) : null}\r\n            <div style={{ paddingTop: 20 }}>\r\n              {G.address && G.address.length > 0 && G.status === CONNECTED && (\r\n                <button\r\n                  disabled={loading || supported || G.targetChain === G.chain}\r\n                  className=\"primary full\"\r\n                  onClick={submit}\r\n                >\r\n                  {loading ? (\r\n                    <div className=\"flex middle\">\r\n                      <div style={{ width: \"1.5em\" }}>\r\n                        <div className=\"loader\">Loading...</div>\r\n                      </div>\r\n                      <div>{status.submitLabel}</div>\r\n                    </div>\r\n                  ) : G.status === CONNECTED ? (\r\n                    \"SUBMIT\"\r\n                  ) : (\r\n                    \"SUBMIT\"\r\n                  )}\r\n                </button>\r\n              )}\r\n              {G.status === CONNECTED ? (\r\n                G.err ? (\r\n                  <div className=\"dis-f ai-c\">\r\n                    {/* <img\r\n                      src={G.walletSelect}\r\n                      width=\"20px\"\r\n                      height=\"20px\"\r\n                      alt={\"🦊\"}\r\n                    /> */}\r\n                    <img\r\n                      src=\"/img/metamask.png\"\r\n                      width=\"20px\"\r\n                      height=\"20px\"\r\n                      alt={\"🦊\"}\r\n                    />\r\n                    <p style={{ color: \"red\", padding: 10 }}>{G.err}</p>\r\n                  </div>\r\n                ) : (\r\n                  <p style={{ color: \"#35ff35\" }}>\r\n                    {G.address\r\n                      ? \"Your wallet: \" +\r\n                        G.address.slice(0, 10) +\r\n                        \"...\" +\r\n                        G.address.slice(-4)\r\n                      : \"\"}\r\n                  </p>\r\n                )\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </div>\r\n            {G.status === CONNECTED || G.address.length > 0 ? (\r\n              <>\r\n                {pendingTxs.length ? (\r\n                  <div style={{ paddingTop: 20 }}>\r\n                    <p>\r\n                      <b className=\"label\">Your transactions:</b>\r\n                    </p>\r\n                    <div style={{ maxHeight: 300, overflowY: \"auto\" }}>\r\n                      {pendingTxs.map((v, k) => (\r\n                        <div\r\n                          className={\r\n                            \"tx flex\" + (G.txs[v.key]?.tx ? \"\" : \" pending\")\r\n                          }\r\n                          key={k}\r\n                        >\r\n                          <div className=\"c1\">\r\n                            <img\r\n                              src={`/networks/${v.chain}.svg`}\r\n                              style={{\r\n                                border: \"1px white solid\",\r\n                                borderRadius: \"50%\",\r\n                                width: 16,\r\n                                height: 16,\r\n                                marginRight: 5,\r\n                              }}\r\n                              alt={v.chain}\r\n                            />\r\n                            <span> To </span>\r\n                            <img\r\n                              src={`/networks/${v.targetChain}.svg`}\r\n                              style={{\r\n                                border: \"1px white solid\",\r\n                                borderRadius: \"50%\",\r\n                                width: 16,\r\n                                height: 16,\r\n                                marginLeft: 5,\r\n                              }}\r\n                              alt={v.targetChain}\r\n                            />\r\n                          </div>\r\n                          <code className=\"c2\">\r\n                            <a\r\n                              className=\"cmd\"\r\n                              href={networks[v.chain].explorer + \"/tx/\" + v.key}\r\n                              target=\"_blank\"\r\n                              rel=\"noreferrer\"\r\n                            >\r\n                              {v.key.slice(0, 10) + \"...\" + v.key.slice(-4)}\r\n                            </a>\r\n                          </code>\r\n                          <code className=\"c3\">\r\n                            <img\r\n                              src={`/logo.png`}\r\n                              loading=\"lazy\"\r\n                              style={{ width: 20, height: 20, marginRight: 5 }}\r\n                              alt={v.token}\r\n                            />\r\n                            <span title={G.txs[v.key]?.fee || \"\"}>\r\n                              {v.value}\r\n                            </span>\r\n                          </code>\r\n\r\n                          <div className=\"c4\" style={{ textAlign: \"right\" }}>\r\n                            {G.txs[v.key] ? (\r\n                              G.txs[v.key].tx ? (\r\n                                <a\r\n                                  className=\"cmd\"\r\n                                  href={\r\n                                    networks[v.targetChain].explorer +\r\n                                    \"/tx/\" +\r\n                                    G.txs[v.key].tx\r\n                                  }\r\n                                  target=\"_blank\"\r\n                                  rel=\"noreferrer\"\r\n                                >\r\n                                  view result\r\n                                </a>\r\n                              ) : G.txs[v.key].err ? (\r\n                                <code style={{ color: \"red\" }}>error</code>\r\n                              ) : (\r\n                                <code style={{ color: \"#76808f\" }}>\r\n                                  {G.txs[v.key].confirmations >=\r\n                                  networks[v.chain].confirmations\r\n                                    ? \"processing…\"\r\n                                    : G.txs[v.key].confirmations +\r\n                                      \" / \" +\r\n                                      networks[v.chain].confirmations}\r\n                                </code>\r\n                              )\r\n                            ) : (\r\n                              <code style={{ color: \"#76808f\" }}>\r\n                                confirming...\r\n                              </code>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ) : null}\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* if G.address&&token is selected */}\r\n      {/* Transaction details */}\r\n      {/* {G.address && G.address.length > 0 && G.status === CONNECTED && (\r\n        <section>\r\n          <div className=\"c ml3-md\">\r\n            <div\r\n              className={`panel2 transaction-detail ${\r\n                isTransaction ? \"trans-bg\" : \"\"\r\n              }`}\r\n            >\r\n              <div className=\"top-section tc dis-f\">\r\n                <a\r\n                  onClick={() => {\r\n                    setIsTransaction(!isTransaction);\r\n                  }}\r\n                  className=\"dis-f ai-c mauto\"\r\n                >\r\n                  <AiOutlineUp\r\n                    style={{ fontSize: \"20px\", cursor: \"pointer\" }}\r\n                    color=\"#f0b90b\"\r\n                  />\r\n                  &nbsp;&nbsp;\r\n                  <span\r\n                    style={{ color: \"#f0b90b\" }}\r\n                    className=\"chain-font cu-po\"\r\n                  >\r\n                    Transaction details\r\n                  </span>\r\n                </a>\r\n              </div>\r\n              <div\r\n                className={`transaction-effect ${\r\n                  isTransaction ? \"transaction-show\" : \"transaction-none\"\r\n                }`}\r\n              >\r\n                <div className=\"middle-section\">\r\n                  <div className=\"justify mt1 mb1\">\r\n                    <div className=\"justify\">\r\n                      <span\r\n                        className={`chain-font opa1i ${\r\n                          txDetail.fee === 0 ? \"main-color\" : \"\"\r\n                        }`}\r\n                      >\r\n                        {\" \"}\r\n                        Network fee{\" \"}\r\n                      </span>\r\n                      &nbsp;&nbsp;\r\n                      <div className=\"tooltip justify\">\r\n                        <span className=\"tooltiptext\">\r\n                          Gas fee in target network taken instabletoken of\r\n                          source\r\n                        </span>\r\n                        <AiOutlineQuestionCircle\r\n                          color=\"#f0b90b\"\r\n                          fontSize={\"22px\"}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <span\r\n                      className={`chain-font opa1i ${\r\n                        txDetail.fee === 0 ? \"main-color\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {txDetail.fee}&nbsp;{networks[G.chain].coin}\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"justify mt1 mb1\">\r\n                    <div className=\"justify\">\r\n                      <span\r\n                        className={`chain-font opa1i ${\r\n                          txDetail.providerFee === 0 ? \"main-color\" : \"\"\r\n                        }`}\r\n                      >\r\n                        {\" \"}\r\n                        Provider fee{\" \"}\r\n                      </span>\r\n                      &nbsp;&nbsp;\r\n                      <div className=\"tooltip justify\">\r\n                        <span className=\"tooltiptext\">\r\n                          {\" \"}\r\n                          We don't require a provider fee for users\r\n                        </span>\r\n                        <AiOutlineQuestionCircle\r\n                          color=\"#f0b90b\"\r\n                          fontSize={\"22px\"}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <span\r\n                      className={`chain-font opa1i ${\r\n                        txDetail.providerFee === 0 ? \"main-color\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {\" \"}\r\n                      {txDetail.providerFee}%{\" \"}\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"justify mt1 mb1\">\r\n                    <div className=\"justify\">\r\n                      <span\r\n                        className={`chain-font opa1i ${\r\n                          txDetail.protocalFee === 0 ? \"main-color\" : \"\"\r\n                        }`}\r\n                      >\r\n                        {\" \"}\r\n                        Protocal fee{\" \"}\r\n                      </span>\r\n                      &nbsp;&nbsp;\r\n                      <div className=\"tooltip justify\">\r\n                        <span className=\"tooltiptext\">\r\n                          We don't require a protocal fee for users\r\n                        </span>\r\n                        <AiOutlineQuestionCircle\r\n                          color=\"#f0b90b\"\r\n                          fontSize={\"22px\"}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <span\r\n                      className={`chain-font opa1i ${\r\n                        txDetail.protocalFee === 0 ? \"main-color\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {\" \"}\r\n                      {txDetail.protocalFee}%{\" \"}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"ml1 bottom-section\">\r\n                  <div className=\"justify\">\r\n                    <span className=\"chain-font\">\r\n                      You will receive {G.token} token at this address\r\n                    </span>\r\n                    <div className=\"justify\">\r\n                      <a\r\n                        className=\"chain-font white\"\r\n                        href={`https://bscscan.com/address/${G.address}`}\r\n                        target={\"_blank\"}\r\n                      >\r\n                        {G.address && (\r\n                          <span className=\"chain-font\">\r\n                            {G.address.slice(0, 5) +\r\n                              \"...\" +\r\n                              G.address.slice(\r\n                                G.address.length - 5,\r\n                                G.address.length\r\n                              )}\r\n                          </span>\r\n                        )}\r\n                      </a>\r\n                      &nbsp;&nbsp;\r\n                      <a\r\n                        href={`https://bscscan.com/address/${G.address}`}\r\n                        target={\"_blank\"}\r\n                      >\r\n                        <img\r\n                          src=\"/img/scan.png\"\r\n                          style={{\r\n                            borderRadius: \"50%\",\r\n                            border: \"0px black solid\",\r\n                          }}\r\n                          width=\"25px\"\r\n                          height=\"25px\"\r\n                          alt=\"scan logo\"\r\n                        ></img>\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      )} */}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n// ,\r\n//     \"CRONOS-TEST\": {\r\n//         \"bridge\": \"\",\r\n//         \"chainId\": 338,\r\n//         \"coin\": \"tCRO\",\r\n//         \"decimals\": 18,\r\n//         \"confirmations\": 12,\r\n//         \"blocktime\": 3000,\r\n//         \"rpc\": \"https://evm-t3.cronos.org\",\r\n//         \"explorer\": \"https://cronos.org/explorer/testnet3\",\r\n//         \"erc20\": \"BEP20\"\r\n//     }\r\n","import React from 'react';\r\n\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport Home from './Pages/Home';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\" component={Home}></Route>\r\n\t\t\t\t<Route path=\"*\" component={Home}></Route>\r\n\t\t\t</Switch>\r\n\t\t\t<ToastContainer />\r\n\t\t</BrowserRouter>\r\n\t\t// \r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Web3ReactProvider } from '@web3-react/core';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { Web3Provider } from '@ethersproject/providers';\r\n\r\nimport Slice from './reducer'\r\n\r\nconst store = configureStore({ reducer: Slice.reducer });\r\n\r\nrequire('dotenv').config();\r\nfunction getLibrary(provider: any) {\r\n\tconst library = new Web3Provider(provider);\r\n\tlibrary.pollingInterval = 12000;\r\n\treturn library;\r\n}\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<React.StrictMode>\r\n\t\t\t<Web3ReactProvider getLibrary={getLibrary}>\r\n\t\t\t\t<App />\r\n\t\t\t</Web3ReactProvider>\r\n\t\t</React.StrictMode>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}